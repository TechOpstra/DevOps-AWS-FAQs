#####  AWS - IAM FAQ  #####



Q1. What is AWS Identity and Access Management (IAM)?

   * IAM (Identity and Access Management) is a service provided by AWS that allows you to manage access to AWS services and resources securely.
   * With IAM, you can create and manage AWS users, groups, and roles and control their access to resources using permissions.


==================================================================================================================================================



Q2. How does IAM work and what can I do with it?

   * AWS Identity and Access Management (IAM) works by allowing you to create and manage AWS users and groups.
   * We can set permissions to allow or deny their access to AWS resources.
   
   what can we do with it:

   *  Create individual users and assign them unique security credentials (passwords, access keys).
   *  Organize users into groups to manage permissions collectively.
   *  Use policies to define what actions users and groups can perform on specific AWS resources.
   *  Create roles that can be assumed by users or services for temporary access to resources, without sharing long-term credentials.
   *  we can enable Multi-Factor Authentication to Enhance security.
   *  With IAM, we can ensure that only authorized users have the right level of access to your AWS resources, enhancing security and compliance


#Example:

#Using AWS CLI Commands:

$. aws iam create-user --user-name MyUser
$. aws iam create-login-profile --user-name MyUser --password MySecurePassword123 --password-reset-required
$. aws iam create-access-key --user-name MyUser
$. aws iam attach-user-policy --user-name MyUser --policy-arn arn:aws:iam::aws:policy/PowerUserAccess
$. aws iam create-group --group-name MyGroup
$. aws iam add-user-to-group --user-name MyUser --group-name MyGroup
$. aws iam attach-group-policy --group-name MyGroup --policy-arn arn:aws:iam::aws:policy/PowerUserAccess
8. aws iam create-role --role-name MyRole --assume-role-policy-document file://trust-policy.json
   
   {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

$. aws iam attach-role-policy --role-name MyRole --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
$. aws sts assume-role --role-arn arn:aws:iam::123456789012:role/MyRole --role-session-name MySession


# Using terraform code blocks:

provider "aws" {
  region = "us-west-2"
}


resource "aws_iam_user" "my_user" {
  name = "MyUser"
}


resource "aws_iam_user_login_profile" "my_user_login_profile" {
  user = aws_iam_user.my_user.name
  password = "MySecurePassword123"
  password_reset_required = true
}

resource "aws_iam_access_key" "my_user_access_key" {
  user = aws_iam_user.my_user.name
}


resource "aws_iam_user_policy_attachment" "my_user_policy_attachment" {
  user = aws_iam_user.my_user.name
  policy_arn = "arn:aws:iam::aws:policy/PowerUserAccess"
}


resource "aws_iam_group" "my_group" {
  name = "MyGroup"
}


resource "aws_iam_user_group_membership" "my_user_group_membership" {
  user = aws_iam_user.my_user.name
  groups = [aws_iam_group.my_group.name]
}


resource "aws_iam_group_policy_attachment" "my_group_policy_attachment" {
  group = aws_iam_group.my_group.name
  policy_arn = "arn:aws:iam::aws:policy/PowerUserAccess"
}


resource "aws_iam_role" "my_role" {
  name = "MyRole"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}


resource "aws_iam_role_policy_attachment" "my_role_policy_attachment" {
  role = aws_iam_role.my_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
}

data "aws_iam_policy_document" "assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]
    resources = [aws_iam_role.my_role.arn]
  }
}



===========================================================================================================================================================



Q3. What are least-privilege permissions?

   * Least-privilege permissions refer to the practice of granting users, groups, or roles only the permissions they need to perform their specific tasks.
   * This principle helps minimize the risk of accidental or malicious actions that could compromise security.

  some of least-prvilege permissions:

   * Allowing users to list and read objects in an S3 bucket, but not to write or delete them.
   * Allowing users to start and stop EC2 instances, but not to terminate or modify them.
   * Allowing users to read data from DynamoDB tables, but not to write or delete data.

#Examples:

#using aws cli:
 
1. aws iam create-policy --policy-name S3ReadOnlyPolicy --policy-document file://s3-read-only-policy.json

2. aws iam attach-user-policy --user-name your-username --policy-arn arn:aws:iam::aws:policy/S3ReadOnlyPolicy
 
#s3-read-only-policy.json#
	{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::example-bucket",
        "arn:aws:s3:::example-bucket/*"
      ]
    }
  ]
}
    

3. aws iam create-policy --policy-name EC2StartStopPolicy --policy-document file://ec2-start-stop-policy.json

4. aws iam attach-user-policy --user-name your-username --policy-arn arn:aws:iam::aws:policy/EC2StartStopPolicy

## /ec2-start-stop-policy.json ##


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances"
            ],
            "Resource": "arn:aws:ec2:region:account-id:instance/*"
        }
    ]
}


5. aws iam create-policy --policy-name DynamoDBReadOnlyPolicy --policy-document file://dynamodb-read-only-policy.json

6. aws iam attach-user-policy --user-name your-username --policy-arn arn:aws:iam::aws:policy/DynamoDBReadOnlyPolicy

#dynamodb-read-only-policy.json#

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan"
            ],
            "Resource": "arn:aws:dynamodb:region:account-id:table/your-table-name"
        }
    ]
}


#Terraform code block 

#for s3 readonly access:

resource "aws_iam_policy" "s3_read_only_policy" {
  name        = "S3ReadOnlyPolicy"
  description = "Policy to allow read-only access to S3 bucket"
  policy      = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = ["s3:ListBucket"]
        Resource = "arn:aws:s3:::your-bucket-name"
      },
      {
        Effect   = "Allow"
        Action   = ["s3:GetObject"]
        Resource = "arn:aws:s3:::your-bucket-name/*"
      }
    ]
  })
}

resource "aws_iam_user_policy_attachment" "s3_read_only_attachment" {
  user       = "your-username"
  policy_arn = aws_iam_policy.s3_read_only_policy.arn
}


# policy to start and stop ec2 instnces only #


resource "aws_iam_policy" "ec2_start_stop_policy" {
  name        = "EC2StartStopPolicy"
  description = "Policy to allow start and stop of EC2 instances"
  policy      = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = ["ec2:StartInstances", "ec2:StopInstances"]
        Resource = "arn:aws:ec2:region:account-id:instance/*"
      }
    ]
  })
}

resource "aws_iam_user_policy_attachment" "ec2_start_stop_attachment" {
  user       = "your-username"
  policy_arn = aws_iam_policy.ec2_start_stop_policy.arn
}


# allowing users to read data from dynamodb only

resource "aws_iam_policy" "dynamodb_read_only_policy" {
  name        = "DynamoDBReadOnlyPolicy"
  description = "Policy to allow read-only access to DynamoDB tables"
  policy      = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = ["dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan"]
        Resource = "arn:aws:dynamodb:region:account-id:table/your-table-name"
      }
    ]
  })
}

resource "aws_iam_user_policy_attachment" "dynamodb_read_only_attachment" {
  user       = "your-username"
  policy_arn = aws_iam_policy.dynamodb_read_only_policy.arn
}


===========================================================================================================================================================




Q4. What are IAM policies?

   * IAM (Identity and Access Management) policies are JSON documents that define permissions for actions on AWS resources.
   * These policies specify who can do what on which resources, allowing you to control access to your AWS environment.
   * There are several types of IAM policies in AWS, each serving different purposes.

#Example of an IAM policy:

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::example-bucket",
                "arn:aws:s3:::example-bucket/*"
            ]
        }
    ]
}

Version: Specifies the policy language version. The current version is "2012-10-17".

Statement: Contains one or more individual statements (permissions).

Effect: Specifies whether the statement allows or denies access. It can be "Allow" or "Deny".

Action: Lists the actions that are allowed or denied. For example, s3:ListBucket or ec2:StartInstances.

Resource: Specifies the AWS resources to which the actions apply. For example, an S3 bucket or an EC2 instance.

Condition: (Optional) Specifies conditions for when the policy is in effect. For example, you can restrict access based on IP address or time of day.




=====================================================================================================================================================================


   

Q5. Why should I use IAM roles?

    IAM roles are a powerful feature in AWS that offer several benefits for managing access and permissions. we should use them for below reasons
    
     * To provide temporary security credentials, reducing the risk of long-term credential exposure.
     * IAM roles allow you to securely share resources between different AWS accounts without sharing long-term credentials.
     * You can delegate access to resources in your account to users or services in another account.
     * IAM roles enable AWS services to interact with each other securely. For example, an EC2 instance can assume a role to access S3 buckets or DynamoDB tables.
     * IAM roles eliminate the need to hardcode credentials in your applications, reducing the risk of credential leakage.
     * IAM roles allow you to dynamically grant access to resources based on the current needs of your applications or users.

==============================================================================================================================================================

Q6. How to create policies using Create IAM policies (AWS CLI)?

    #steps to create a policy usinng aws cli:

    1. Create a JSON file named ec2-describe-instances-policy.json with the following content:

        
        {
   		 "Version": "2012-10-17",
    		"Statement": [
       	 {
        	    "Effect": "Allow",
         	    "Action": [
                "ec2:DescribeInstances"
          		  ],
                "Resource": "*"
      	  }
    		]
	 }


    2. Run the create-policy command:

       aws iam create-policy --policy-name EC2DescribeInstancesPolicy --policy-document file://ec2-describe-instances-policy.json



==============================================================================================================================================================



Q7. what types of policies?


Below are the types:

   1. Managed Policies
     
      a. AWS Managed Policies:
 
          * These are pre-defined policies created and managed by AWS.They are designed to provide permissions for common use cases. For example, AmazonS3ReadOnlyAccess is an AWS
      
      b. Customer Managed Policies:

          * These are policies that you create and manage in your AWS account. They provide more flexibility and control over the permissions you grant. 
   
   2. Inline Policies:

       * These are policies that you create and embed directly within a single IAM user, group, or role.
       * They are not reusable and are tightly coupled with the entity they are attached to.


   3. Service Control Policies:

       * These are policies used in AWS Organizations to manage permissions across multiple AWS accounts. 
       * SCPs allow you to set permission guardrails for all accounts within an organization or organizational unit (OU).
      
   4. Permissions Boundaries:

       * These are advanced policies that define the maximum permissions an IAM entity (user or role) can have. 
       * They are used to set limits on the permissions that can be granted by other policies.

   5. Session Policies:

      * These are policies that you pass when you create a temporary session for a role or federated user. 
        They provide additional permissions or restrictions for the duration of the session.

==================================================================================================================================================================


Q8. What are the Best Practices?


    Below are some best practices specifically for creating and managing IAM policies:
    
    * Ensure that users, groups, and roles have only the permissions they need to perform their tasks. Avoid granting excessive permissions.
    * Regularly review IAM policies to ensure they still meet your security and operational requirements. Remove or update policies that are no longer needed.
    * Use conditions in your policies to add an extra layer of security. For example, restrict access based on IP address, time of day, or whether MFA is used.
    * Enforce MFA for sensitive operations and for users with high-level permissions to add an extra layer of security.
    * Use AWS CloudTrail to log IAM activities and monitor for any unusual or unauthorized actions.


=================================================================================================================================================================


Q9. Which policy attached to role to perform ECS task?

    To perform an Amazon ECS task, you need to attach specific IAM policies to the role associated with the task.

    1. Amazon ECS Task Execution Role:

      * Policy: AmazonECSTaskExecutionRolePolicy
      * Purpose: Allows ECS to pull container images and publish container logs to Amazon CloudWatch.
       


    2. Amazon ECS Task Role:
  
      * Policy: Custom policy based on the specific AWS services your tasks need to interact with.
      * Purpose: Grants permissions to the containers running within the task to access other AWS services.

      Example policy:
      
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
             "ecs:ListTasks",
             "ecs:DescribeTasks"
             ],
             "Resource": "*"
         }
       ]
     }
  
   
#Examples:

## Using AWS CLI ##

# IAM task-execution role policy atachment

$ aws iam attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

# creating and attaching task-role policy

$ aws iam create-policy --policy-name MyECSTaskPolicy --policy-document file://my-ecs-task-policy.json
$ aws iam attach-role-policy --role-name ecsTaskRole --policy-arn arn:aws:iam::aws:policy/MyECSTaskPolicy

#my-ecs-task-policy.json

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecs:ListTasks",
        "ecs:DescribeTasks"
      ],
      "Resource": "*"
    }
  ]
}


     
============================================================================================================================================================  


Q10. How to assign User/Admin IAM policy for ECS management?

     To assign User/Admin IAM policies for ECS management, you need to create and attach specific IAM policies that grant the necessary permissions.

     #Examples:

     # Using AWS CLI

     1. User Policy:
      
           a. define the permissions in a JSON document.
              
              #ecs-user-policy.json
               {
 			 "Version": "2012-10-17",
 			 "Statement": [
  			  {
     			 "Effect": "Allow",
    			  "Action": [
     			  "ecs:ListClusters",
      		  "ecs:DescribeClusters",
       		  "ecs:ListServices",
      		  "ecs:DescribeServices",
       		 "ecs:ListTasks",
       		 "ecs:DescribeTasks"
     		   ],
     			 "Resource": "*"
   		  }
  		]
	    }

               

           b. aws iam create-policy --policy-name MyECSUserPolicy --policy-document file://ecs-user-policy.json
           c. aws iam put-user-policy --user-name myuser --policy-name ECSUserPolicy --policy-document file://ecs-user-policy.json


     2. Admin Policy:


          a. define the permissions in a json document
           
            # ecs-admin-policy.json

            {
  			"Version": "2012-10-17",
 			 "Statement": [
    			{
     				 "Effect": "Allow",
     				 "Action": "ecs:*",
   				 "Resource": "*"
   			}
  		    ]
		   }


          b. aws iam create-policy --policy-name MyECSadmiPolicy --policy-document file://ecs-admin-policy.json
          c. aws iam put-user-policy --user-name adminuser --policy-name ECSAdminPolicy --policy-document file://ecs-user-policy.json

     


    # Using terraform code block:

      a. User Policy

      resource "aws_iam_policy" "ecs_user_policy" {
        name        = "ECSUserPolicy"
        description = "Policy for ECS user with basic permissions"
        policy      = jsonencode({
          Version = "2012-10-17",
          Statement = [
            {
              Effect = "Allow",
              Action = [
                 "ecs:ListClusters",
                 "ecs:DescribeClusters",
                 "ecs:ListServices",
                 "ecs:DescribeServices",
                 "ecs:ListTasks",
                 "ecs:DescribeTasks"
              ],
              Resource = "*"
           }
         ]
       })
     }

    b. Admin Policy


     
	resource "aws_iam_policy" "ecs_admin_policy" {
 	 name        = "ECSAdminPolicy"
 	 description = "Policy for ECS admin with full permissions"
 	 policy      = jsonencode({
   	   Version = "2012-10-17",
         Statement = [
           {
             Effect = "Allow",
             Action = "ecs:*",
             Resource = "*"
           }
         ]
       })
     }


    c. Attach User Policy


       resource "aws_iam_user_policy_attachment" "ecs_user_policy_attachment" {
         user       = aws_iam_user.example_user.name
         policy_arn = aws_iam_policy.ecs_user_policy.arn
       }


   d. Attach Admin Policy


      resource "aws_iam_user_policy_attachment" "ecs_admin_policy_attachment" {
        user       = aws_iam_user.example_admin.name
        policy_arn = aws_iam_policy.ecs_admin_policy.arn
      }
   
   
   e. Example users

      resource "aws_iam_user" "example_user" {
         name = "example_user"
       }

     resource "aws_iam_user" "example_admin" {
         name = "example_admin"
       }
 
===========================================================================================================================================================


Q11. If you're creating and managing AWS EKS service which IAM policies that allow you.


     When creating and managing AWS EKS (Elastic Kubernetes Service), you need specific IAM policies that grant the necessary permissions

     1. AmazonEKSClusterPolicy: This policy allows EKS to manage cluster resources on your behalf.
     
     2. AmazonEKSServicePolicy: This policy allows EKS to interact with other AWS services.
   
     3. AmazonEKSWorkerNodePolicy: This policy allows worker nodes to interact with EKS.

     4. AmazonEKS_CNI_Policy: This policy allows the Amazon VPC CNI plugin to manage network interfaces and IP addresses.
   
     5. AmazonEC2ContainerRegistryReadOnly: grants read-only permissions to Amazon Elastic Container Registry (ECR)
   

     Example CLI commands:

     $ aws iam attach-role-policy --role-name eksClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
     $ aws iam attach-role-policy --role-name eksClusterRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSServicePolicy
     $ aws iam attach-role-policy --role-name eksNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
     $ aws iam attach-role-policy --role-name eksNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
     $ aws iam attach-role-policy --role-name eksNodeRole --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy



===========================================================================================================================================================
Q12. What is the use of iam:PassRole permission?

     The iam:PassRole permission in AWS allows a user, group, or role to pass an IAM role to certain AWS services.
     This is often required when a service needs to perform actions on behalf of the user or application, using the permissions of the passed role.
     
     Key Uses of iam:PassRole:
    
        * Assigning a Role to an EC2 Instance:
          When launching an EC2 instance, you might assign an IAM role to allow the instance to access AWS resources like S3 or DynamoDB
        
        * Granting Permissions for AWS Lambda Execution:
          When creating or updating a Lambda function, you pass an IAM role that the function uses to access resources.
        
        
     Policy for iam:PassRole:

     A user needs explicit permission for the iam:PassRole action. Here's an example policy:


      '{
 	  "Version": "2012-10-17",
  	  "Statement": [
    	     {
      	 "Effect": "Allow",
      	 "Action": "iam:PassRole",
      	 "Resource": "arn:aws:iam::123456789012:role/MyEcsTaskRole"
    	    }
        ]
      }'
    

    Action: Grants the iam:PassRole permission.
    Resource: Specifies the role(s) that the user can pass.


    Example Workflow:

       A user with the above permission launches an EC2 instance.

       They select MyExampleRole to attach to the instance.

       AWS validates whether the user has iam:PassRole for MyExampleRole.

=======================================================================================================================================================




Q13. What is Trust policy?
     
     A trust policy is a JSON document that specifies which entities (users, roles, or services) are allowed to assume a particular IAM role. 
     It defines the trust relationship between the role and the entities that can assume it.

     Key Components of a Trust Policy:

     1. Version: Specifies the version of the policy language.
     2. Statement: Contains one or more statements that define the trust relationship
        
           a. Effect: Usually set to "Allow".
           b. Principal: Specifies the entities that are allowed to assume the role.
           c. Action: Specifies the action that is allowed, typically sts:AssumeRole.
           d. Condition: (Optional) Specifies conditions that must be met for the policy to apply.

    Example:

    {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
         "Service": "ecs-tasks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}



=============================================================================================================================================================




Q14. Can you restruct IAM user access by IP address?


     we can restrict IAM user access by IP address using IAM policies with the aws:SourceIp condition key.



    # Example Policy:

      The policy denies all actions ("Action": "*" and "Resource": "*") if the request does not originate from the specified IP ranges (192.0.2.0/24 and 203.0.113.0/24).


             {
  		   "Version": "2012-10-17",
  		   "Statement": [
   		   {
      		 "Effect": "Deny",
      		 "Action": "*",
      		 "Resource": "*",
      		 "Condition": {
       		   "NotIpAddress": {
          			"aws:SourceIp": [
                    	   "192.0.2.0/24",
            		   "203.0.113.0/24"
        		     ]
                     }
                  }
               }
            ]
          }

     
   # implementation steps
 
     a. aws iam create-policy --policy-name RestrictIPPolicy --policy-document file://restrict-ip-policy.json  -- create policy
     b. aws iam attach-user-policy --user-name example_user --policy-arn arn:aws:iam::123456789012:policy/RestrictIPPolicy











Q15. How to audit IAM changes?

     Auditing Identity and Access Management (IAM) changes is crucial for maintaining security and compliance, below are the steps to follow.
    

        1. Enable AWS CloudTrail:
           AWS CloudTrail records all API calls for IAM and other AWS services. This includes actions such as creating
           modifying, or deleting IAM roles, users, and .

        #Examles using aws cli commands:

           $ aws cloudtrail create-trail --name MyTrail --s3-bucket-name my-cloudtrail-bucket    -- to Create a CloudTrail
           $ aws cloudtrail start-logging --name MyTrail                                         -- start logging
           $ aws cloudtrail update-trail --name MyTrail --include-global-service-events          --  Configure the Trail to Log Management Events
           $ aws cloudtrail describe-trails --trail-name-list MyTrail                            --  Verify the Trail Configuration
        
                                                           
        
        2. Set Up Amazon CloudWatch Alarms:
           Amazon CloudWatch can monitor CloudTrail logs and trigger alarms based on specific IAM changes.

        #Examles using aws cli commands:

          $ aws logs create-log-group --log-group-name CloudTrail/IAMChanges                    ---  Create a CloudWatch Log Group


          $ aws logs put-metric-filter --log-group-name CloudTrail/IAMChanges --filter
            -name IAMChangesFilter --filter-pattern '{ ($.eventName = "CreateUser") || 
            ($.eventName = "DeleteUser") || ($.eventName = "UpdateUser") }' --metric-
            transformations metricName=IAMChanges,metricNamespace=CloudTrailMetrics,metricValue=1 --- Create a Metric Filter

          $ aws cloudwatch put-metric-alarm --alarm-name IAMChangesAlarm --metric-name 
            IAMChanges --namespace CloudTrailMetrics --statistic Sum --period 300 --
            threshold 1 --comparison-operator GreaterThanOrEqualToThreshold 
            --evaluation-periods 1 --alarm-actions <SNS_TOPIC_ARN>                                ---- Create an Alarm


        3.  Use IAM Access Analyzer:
           IAM Access Analyzer helps you identify resources that are shared with external entities, which can be a security risk.
       
        #Examles using aws cli commands:

        $ aws accessanalyzer create-analyzer --analyzer-name MyAnalyzer --type ACCOUNT            --- Create an Analyzer:
 
        $ aws accessanalyzer list-findings --analyzer-name MyAnalyzer                             --- List findings.

        $ aws accessanalyzer update-findings --analyzer-name MyAnalyzer --status ARCHIVED --ids <FINDING_ID>   --- Update findings.




        4.  Regular Audits and Reviews:
            Periodically review IAM policies, roles, and permissions to ensure they adhere to the principle of least privilege.

            Steps:
	        Schedule regular audits.
		  Review IAM users, roles, and policies.
		  Remove or update any unnecessary permissions

=============================================================================================================================================================


Q16. How Would you restrict an IAM role to access S3 only if MFA is enabled and the request comes from a specific VPC?

     * We can ensure that the IAM role can access the S3 bucket only if MFA is enabled and the request comes from the specified with below steps


     
     #step1: create an iam policy with MFA requirement and attach that policy to the IAM role.

     command1: aws iam create-policy --policy-name MFARequiredPolicy --policy-document '{

      	 "Version": "2012-10-17",
      	 "Statement": [
      	     {
           		   "Effect": "Allow",
           		   "Principal": {
            	       "AWS": "arn:aws:iam::your-account-id:role/your-role-name"
          		    },
        		    "Action": "s3:*",
           		    "Resource": [
              		  "arn:aws:s3:::your-bucket-name",
             		  "arn:aws:s3:::your-bucket-name/*"
         		   ],
         		   "Condition": {  
				 "Bool": {
                  	     "aws:MultiFactorAuthPresent": "true"
               		  }
           		    }
                  }
              ]
          }

     #step2: Attach the IAM Policy to the Role
  
     command2: aws iam attach-role-policy --role-name your-role-name --policy-arn arn:aws:iam::your-account-id:policy/MFARequiredPolicy

     #step3: Create the S3 bucket policy with the VPC condition and save it in a file named bucket-policy.json:


          
      	 "Version": "2012-10-17",
      	 "Statement": [
      	     {
           		   "Effect": "Allow",
           		   "Principal": {
            	       "AWS": "arn:aws:iam::your-account-id:role/your-role-name"
          		    },
        		    "Action": "s3:*",
           		    "Resource": [
              		  "arn:aws:s3:::your-bucket-name",
             		  "arn:aws:s3:::your-bucket-name/*"
         		   ],
         		   "Condition": {  
				 "StringEquals": {
                   	     "aws:SourceVpc": "vpc-xxxxxxxx"
               		  }
           		    }
                  }
              ]
          }
           
   
   # step4: apply the bucket policy to the s3 bucket
    
   Command: aws s3api put-bucket-policy --bucket your-bucket-name --policy file://bucket-policy.json

# terraform code:

# IAM Policy with MFA Requirement

  resource "aws_iam_policy" "mfa_required_policy" {
  name        = "MFARequiredPolicy"
  description = "Policy to allow S3 actions only if MFA is enabled"
  policy      = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = "s3:*",
        Resource = [
          "arn:aws:s3:::your-bucket-name",
          "arn:aws:s3:::your-bucket-name/*"
        ],
        Condition = {
          Bool = {
            "aws:MultiFactorAuthPresent" = "true"
          }
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "attach_mfa_policy" {
  role       = aws_iam_role.your_role.name
  policy_arn = aws_iam_policy.mfa_required_policy.arn
}


# S3 Bucket Policy with VPC Condition

data "aws_iam_policy_document" "s3_bucket_policy" {
  statement {
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::your-account-id:role/your-role-name"]
    }
    actions   = ["s3:*"]
    resources = [
      "arn:aws:s3:::your-bucket-name",
      "arn:aws:s3:::your-bucket-name/*"
    ]
    condition {
      test     = "StringEquals"
      variable = "aws:SourceVpc"
      values   = ["vpc-xxxxxxxx"]
    }
  }
}

resource "aws_s3_bucket_policy" "bucket_policy" {
  bucket = aws_s3_bucket.your_bucket.id
  policy = data.aws_iam_policy_document.s3_bucket_policy.json
}


==========================================================================================================================================================

Q17. What IAM roles typically used for each of these AWS services like S3, ECS, EKS, Lambda, ALB and EC2 with example?


     Below are some typical IAM roles used for each of these AWS services along with examples:

     1. Amazon S3 (Simple Storage Service) 

     IAM Role Example:
     Role Name: S3AccessRole
     Policy: Allows full access to a specific S3 bucket.
     Role: This role grants permissions to list, get, put, and delete objects in the specified S3 bucke

     {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
       	  "s3:ListBucket",
        	  "s3:GetObject",
        	  "s3:PutObject",
        	  "s3:DeleteObject"
     	      ],
     		 "Resource": [
      	  "arn:aws:s3:::example-bucket",
      	  "arn:aws:s3:::example-bucket/*"
     	 	]
    	    }
  	 ]
    }


    2. Amazon ECS (Elastic Container Service)

	IAM Role Example:
	Role Name: ECSTaskRole
	Policy: Allows ECS tasks to access other AWS services.
      Role: This role allows ECS tasks to read objects from S3 and put items into DynamoDB

       {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
        	  "s3:GetObject",
        	  "dynamodb:PutItem"
     	      ],
     		 "Resource": "*"
      	  
     	 	]
    	    }
  	 ]
    }


    3. Amazon EKS (Elastic Kubernetes Service)

       IAM Role Example:
       Role Name: EKSClusterRole
       Policy: Allows EKS to manage cluster resources.
       Role: This role grants permissions to create, describe, and delete EKS clusters


       {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
        	  
			"eks:CreateCluster",
        		"eks:DescribeCluster",
        		"eks:DeleteCluster"
     	      ],
     		 "Resource": "*"
      	  
     	 	]
    	    }
  	 ]
    }



   4. AWS Lambda
	
	IAM Role Example:
	Role Name: LambdaExecutionRole
	Policy: Allows Lambda functions to log to CloudWatch.
      Role: This role allows Lambda functions to create log groups, log streams, and put log events in CloudWatch



      {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
        	  
			"logs:CreateLogGroup",
        		"logs:CreateLogStream",
        		"logs:PutLogEvents"
     	 	],
    	    }
  




    5. Application Load Balancer (ALB)

	IAM Role Example:
	Role Name: ALBAccessRole
	Policy: Allows ALB to manage load balancer resources.
      Role: This role grants permissions to create, describe, and delete load balancers


      {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
        	  
		  "elasticloadbalancing:CreateLoadBalancer",
        	  "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DeleteLoadBalancer"

     	      ],
     		 "Resource": "*"
      	  
     	 	]
    	    }
  	 ]
    }



    6. Amazon EC2 (Elastic Compute Cloud)

	IAM Role Example:
	Role Name: EC2InstanceRole
	Policy: Allows EC2 instances to access S3 and DynamoD
      Role: This role allows EC2 instances to read objects from S3 and put items into DynamoDB



      {
 	 "Version": "2012-10-17",
 	 "Statement": [
    	   {
      	"Effect": "Allow",
      	"Action": [
        	  
		  
		  "s3:GetObject",
              "dynamodb:PutItem"


     	      ],
     		 "Resource": "*"
      	  
     	 	]
    	    }
  	 ]
    }